/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'com.diffplug.spotless' version '6.6.1'
    id 'distribution'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version "1.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.worksap.nlp:sudachi:0.6.2'
    implementation 'com.worksap.nlp:jdartsclone:1.2.0'
    testImplementation 'junit:junit:4.13.2'
}

group = 'com.worksap.nlp'
version = '0.2.0-SNAPSHOT'
description = 'Kintoki'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "worksapplications"
        property "sonar.projectKey", "com.worksap.nlp.kintoki"
        property "sonar.language", "java"
        property "sonar.links.homepage", "https://github.com/WorksApplications/kintoki"
        property "sonar.links.ci", "https://github.com/WorksApplications/kintoki/actions"
        property "sonar.links.issue", "https://github.com/WorksApplications/kintoki/issues"
    }
}
spotless {
    encoding "UTF-8"
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.txt', '*.csv'
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        eclipse('4.21.0').configFile('.formatter/eclipse-formatter.xml')
        licenseHeaderFile('.formatter/license-header')
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}
